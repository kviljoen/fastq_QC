
/*
 * -------------------------------------------------
 *  fastq_QC Nextflow config file 
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest
{
  homePage = 'https://github.com/kviljoen/fastq_QC'
  description = 'fastq_QC : adapter removal, trimmin, filtering, multiQC'
  mainScript = 'main.nf'
}


// Some help with time stamps
import java.text.SimpleDateFormat

// Global default params, used in configs
params {
  name = false
  version = 0.1 //pipeline version
  // Pipeline Options
  reads = "data/*{R1,R2}.fastq.gz"
  timestamp = new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())
  outdir = "./" + timestamp + "-fastq_QC"
	
  //dedup java options
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 (in Sarek) for details


  //BBduk parameters for trimming	
  qin=33 //Input quality offset: 33 (ASCII+33) or 64 (ASCII+64)
  kcontaminants = 23 //Kmer length used for finding contaminants	
  phred = 10 //regions with average quality BELOW this will be trimmed 
  minlength = 60 //reads shorter than this after trimming will be discarded
  mink = 11 //shorter kmers at read tips to look for 
  hdist = 1  //maximum Hamming distance for ref kmers            
	
}


profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  
  uct_hpc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uct_hpc.config'
  }
  
   ilifu {
    includeConfig 'conf/base.config'
    includeConfig 'conf/ilifu.config'
  }

}
  
  
timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/fastq_qc_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/fastq_qc_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/fastq_qc_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/fastq_qc_DAG.svg"
}
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
